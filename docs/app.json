[{"name": "app.py", "content": "\n\n#----------------------------------------------\n# Import all the library \n#----------------------------------------------\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shinywidgets import output_widget, render_widget\nimport plotly.express as px\nimport plotly.io as pio\nimport pandas as pd\nfrom pathlib import Path\n\n#----------------------------------------------\n# Upload the file \n#----------------------------------------------\n\ninfile = Path(__file__).parent / \"df.csv\"\ndf = pd.read_csv(infile)\n\n#----------------------------------------------\n# Define Global\n#----------------------------------------------\n\n#groupby based on headquarter_location and then sum all revenue for each country. \n#then, sort the dataframe with decending order based on the revenue_$\n#assign it as variable num_1\n#add new coloumn to check the percentage of revenue\nnum_1 = df.groupby('headquarter_location')[['revenue', 'profit', 'employee_number' ]].sum().reset_index().sort_values('revenue', ascending=False)\nnum_1['perc_rev'] = (num_1['revenue']*100/(num_1['revenue'].sum())).round(2)\n\n\n#groupby based on headquarter_location and then sum all revenue for each country. \n#then, sort the dataframe with decending order based on the revenue_$\n#add new coloumn to check the percentage of employee\nnum_2 = df.groupby('industry')[['revenue', 'profit', 'employee_number' ]].sum().reset_index().sort_values('revenue', ascending=False)\nnum_2['perc_emp'] = (num_2['employee_number']*100/(num_2['employee_number'].sum())).round(2)\n\n#----------------------------------------------\n# Define User Interaction (ui)\n#----------------------------------------------\n\n#Main navigation (page navbar)\napp_ui = ui.page_navbar(\n\n#----------------------------------------------\n# First Tab : Overview\n#----------------------------------------------\n\n    ui.nav(\n    ui.h2({\"style\": \"text-align: center; font-size : 28px; color :white; font-weight:bold; margin: 0 15px;\"}, \"Overview\"),\n    \n        #First page : Layout sidebar\n        ui.layout_sidebar(\n        \n        #First page : panel sidebar\n        ui.panel_sidebar(\n          \n            {\"style\": \"background-color: #023047 ; font-size : 17px ; color:white ; height:700px\"},\n            ui.tags.style(\"\"\"body {font-family: Optima}\"\"\"),\n        \n            ui.br(),\n            ui.p('''\n                This dataset, retrieved from Wikipedia, comprises the world's largest companies ranked by \n                consolidated revenue in the Fortune Global 500 2023 rankings. The list is limited to the \n                top 50 companies, all of which have annual revenues exceeding US$130 billion.'''),\n            ui.br(),\n            ui.p('''          \n                You can explore \n                the scatter plot by selecting the industry type and specifying the revenue range. On the chart, \n                the x-axis represents revenue, the y-axis represents profit, and the size of the bubble \n                corresponds to the number of employees.\n                '''),\n            ui.br(),\n            \n            #Input selectize \n            ui.input_selectize(\"industry\", \"Choose Type of Industry (One or Multiple) :\",\n                    {\"Oil and gas\": \"Oil and gas\",\n                    \"Healthcare\": \"Healthcare\",\n                    \"Retail\":\"Retail\",\n                    \"Financials\":\"Financials\",\n                    \"Commodities\":\"Commodities\",\n                    \"Automotive\":\"Automotive\",\n                    \"Electronics\":\"Electronics\",\n                    \"Electricity\": \"Electricity\"},\n                    multiple = True),\n\n            #Input slider\n            ui.input_slider(\"revenue\", \n                \"Choose Range of Revenue :\", \n                 min = 157000, max = 612000, value=[157000, 612000]),\n            ),\n\n        #First page : Main pane;\n        ui.panel_main(\n            \n            #Output : scatterplot\n            output_widget(\"scatter_1\"),\n            {\"style\":  \"height:700px\"}\n            )\n        )),\n    \n\n#----------------------------------------------\n# Second Tab : Map\n#----------------------------------------------\n\n    ui.nav(\n    ui.h2({\"style\": \"text-align: center; font-size : 28px; color :white; font-weight:bold; margin: 0 15px;\"}, \"Map\"),\n    \n        #Second Tab : Layout Sidebar\n        ui.layout_sidebar(\n        \n            #Second Tab : Panel Sidebar\n            ui.panel_sidebar(\n                {\"style\": \"background-color: #023047 ; font-size : 17px ; color:white ; height:700px\"},\n                ui.tags.style(\"\"\"body {font-family: Optima}\"\"\"),\n        \n                ui.br(),\n                ui.p(''' \n                    In this section, we can examine the distribution of cumulative revenue, profit, and \n                    employee numbers based on headquarter location using a map. The map utilizes color to \n                    represent the values of each selected parameter, where darker colors indicate higher \n                    values compared to lighter colors. Simply choose one of the buttons to visualize the results.\n                    '''),\n                ui.br(),\n                ui.br(),\n\n                #Input : radio buttons\n                ui.input_radio_buttons(\n                    \"parameter\",\n                    \"Choose one parameter:\",\n                    {\n                    \"revenue\":  \"Revenue\",\n                    \"profit\": \"Profit\",\n                    \"employee_number\": \"Number of Employee\"\n                    }),\n            ),\n\n            #Second page : Main panel \n            ui.panel_main(\n                {\"style\":  \"height:700px\"},\n                \n                #Output : text\n                ui.output_text(\"txt\"),\n                \n                #Output : map\n                output_widget(\"map\"),\n                \n                #style=\"font:Optima; background-color: white;\",\n                ),\n                )),\n    \n#----------------------------------------------\n# Third Tab : Dataset\n#----------------------------------------------\n\n    ui.nav(\n    ui.h2({\"style\": \"text-align: center; font-size : 28px; color :white; font-weight:bold; margin: 0 15px;\"}, \"Dataset\"),\n\n        # Third Tab : Layout sidebar\n        ui.layout_sidebar(\n            \n            #Third Tab : Panel Sidebar\n            ui.panel_sidebar(\n     \n                {\"style\": \"background-color: #023047 ; font-size : 17px ; color:white ; height:700px\"},\n                ui.tags.style(\"\"\"body {font-family: Optima}\"\"\"),\n                ui.br(),\n                ui.p('''\n                    Here is the dataset for building the graph and map. You can observe the min and max \n                    values of revenue, profit, and the number of employees by enabling the buttons \n                    above the tables. \n                    '''),\n                ui.br(),\n                ui.p('''\n                    Additionally, you can download the dataset by simply clicking the download button below. \n                    The source code for this project is available on GitHub, and you can find it in the \n                    'Source Code' tab.\n                    '''),\n\n                #Input : download box\n                ui.download_button(\"download1\", \"Download CSV\"), \n                ui.br(),\n                ui.br(),\n                ),\n\n            #Third Tab : Main Panel\n            ui.panel_main( \n                {\"style\":  \"height:700px\"},\n                \n                #Input : Checkbox\n                ui.input_checkbox(\"highlight\", \"Highlight Min and Max Values\"),\n                \n                #Output : Table\n                ui.output_table(\"result\"),\n\n                #Output : Highlight\n                ui.panel_conditional(\n                    \"input.highlight\",\n            \n                #Text notify color\n                ui.panel_absolute(\n                    \"Chocolate is Maximum, Grey is Minimum\",\n                    bottom=\"6px\",\n                    right=\"6px\",\n                    class_=\"p-1 bg-light border\",\n                    ),\n            ),\n                    #class_=\"p-3\",\n\n            ))),\n\n\n#----------------------------------------------\n# Fouth Tab : Source Code\n#----------------------------------------------\n    \n    #Space between tab\n    ui.nav_spacer(),\n    \n    #Fouth tab : Source Code\n    ui.nav_control(\n        \n        #Direct to link\n        ui.a(\"Source Code\", \n            href=\"https://github.com/FibGro/Python-Wikipedia-Web-Scrapping-and-Shiny-Web-Application\", \n            target=\"_blank\", \n            style = \"font: Optima; font-size: 28px; color: #e0a100; font-weight:bold ; margin-top: -4px;\"),\n        ),\n    \n#----------------------------------------------\n# Update Layout : Tab\n#----------------------------------------------\n\n#Background for Tab (Weird that it notify in the last!!)\nbg=\"#425236\",\n)\n\n#----------------------------------------------\n# Define Server\n#----------------------------------------------\n\n#Note : I did not make it in the sequence \ndef server(input, output, session):\n    \n    #The table\n    @output\n    @render.table\n    def table():\n        infile = Path(__file__).parent / \"df.csv\"\n        df = pd.read_csv(infile)\n        return df\n\n\n    #The scatterplot\n    @output\n    @render_widget\n    def scatter_1():\n        fig = px.scatter(\n                 df.loc[(df.industry.isin(input.industry())) & (df.revenue < int(max(input.revenue()))) & (df.revenue > int(min(input.revenue()))) ],\n                 x=\"revenue\", \n                 y=\"profit\", \n                 size=\"employee_number\", \n                 color=\"industry\",\n                 title='Revenue, Profit, Employee Number and Industry Types',\n                 size_max=60,\n                 hover_name=\"companies_name\", \n                 hover_data=[\"revenue\", \"profit\", \"employee_number\", \"industry\"],\n                 width = 900,\n                 height = 630,\n                 labels={\"industry\": \"Type of Industry\",\n                         \"revenue\" : 'Revenue (USD)',\n                         \"profit\" : 'Profit (USD)'})\n\n        fig.update_layout(\n            title=dict(font=dict(size=25)),\n            title_font_color=\"black\",\n            font_family=\"Optima\",\n            font_color=\"black\",\n            title_font_family=\"Optima\",\n            legend_title_font_color=\"black\",\n            template = 'simple_white',\n            hoverlabel=dict(\n                font=dict(family=\"Optima\", \n                 color=\"white\")),\n            )\n        return fig\n\n    #The map\n    @output\n    @render_widget\n    def map():\n        fig_1 = px.choropleth(num_1, \n                    locations='headquarter_location', \n                    locationmode='country names', \n                    color= input.parameter(),\n                    color_continuous_scale='gnbu',\n                    hover_name=\"headquarter_location\", \n                    hover_data=[\"revenue\", \"profit\", \"employee_number\"],\n                    labels={input.parameter():input.parameter().capitalize()})\n\n        fig_1.update_layout(\n            title_font_color=\"black\",\n            font_family=\"Optima\",\n            font_color=\"black\",\n            title_font_family=\"Optima\",\n            legend_title_font_color=\"black\",\n            template = 'simple_white',\n            autosize=False,\n            margin = dict(\n                l=0,\n                r=0,\n                b=0,\n                t=0,\n                pad=4,\n                autoexpand=True\n            ),\n            hoverlabel=dict(\n                font=dict(family=\"Optima\", \n                color=\"white\")),\n            width=900,\n            height=500,\n        )\n        return fig_1\n\n    #The download box\n    @session.download()\n    def download1():\n        path = Path(__file__).parent / \"df.csv\"\n        return str(path)\n\n\n    #The text\n    @output\n    @render.text\n    def txt():\n        return '''\n        It is evident that companies positioned within the top 50, with their headquarters \n        based in the United States, outshine their counterparts in other geographical regions \n        in terms of revenue, profit and number of employees. This observation underscores the prominence of U.S.-based companies \n        in this elite group, emphasizing their substantial share of the total pie. \n        Similarly, China emerged as a key player, making a noteworthy contribution to the \n        cumulative revenue, profit and employee number generated by these top companies.\n        '''\n\n\n    #Render Table\n    @output\n    @render.table\n    def result():\n        if not input.highlight():\n            return df\n        else:\n            return (\n                df.style.set_table_attributes(\n                    'class=\"dataframe shiny-table table w-auto\"'\n                )\n                .hide(axis=\"index\")\n                .set_table_styles(\n                    [dict(selector=\"th\", props=[(\"text-align\", \"right\")])]\n                )\n                .highlight_min(color=\"#BFB68A\", subset=['revenue', 'profit','employee_number'])\n                .highlight_max(color=\"#BF7839\", subset=['revenue', 'profit','employee_number'])\n                )\n\n#----------------------------------------------\n# Define App\n#----------------------------------------------\n\napp = App(app_ui, server)", "type": "text"}, {"name": "README.md", "content": "# Python Web Scrapping and Web Application Python Shiny\n\nThis project involves web scraping using BeautifulSoup on Wikipedia to gather information about the top 50 companies by revenue, utilizing Python. \nSubsequently, we conduct exploratory data analysis, focusing on data cleaning, wrangling, and creating visualizations based on the dataset. \nFinally, we showcase our visualization through a web application created with Shiny Python-Posit and deployed it on shiny.io.\n\n# Dataset \n\nLink : https://en.wikipedia.org/wiki/List_of_largest_companies_by_revenue\n\n# Depedencies \n\n- Jupyter notebook/Visual Code\n- Shinylive for Python\n- Github to deploy\n\n# End Result \n\nThe link of the Shiny product : https://fibgro.github.io/Deploy_Shiny/\n", "type": "text"}, {"name": "df.csv", "content": "rank,companies_name,industry,revenue,profit,employee_number,headquarter_location,profit_margin,revenue_employee\n1,Walmart,Retail,611289,11680,2100000,United States,1.91,0.29\n2,Saudi Aramco,Oil and gas,603651,159069,70496,Saudi Arabia,26.35,8.56\n3,State Grid Corporation of China,Electricity,530009,8192,870287,China,1.55,0.61\n4,Amazon,Retail,513983,-2722,1541000,United States,-0.53,0.33\n5,Vitol,Commodities,505000,15000,1560,Switzerland,2.97,323.72\n6,China National Petroleum Corporation,Oil and gas,483019,21080,1087049,China,4.36,0.44\n7,China Petrochemical Corporation,Oil and gas,471154,9657,527487,China,2.05,0.89\n8,ExxonMobil,Oil and gas,413680,55740,63000,United States,13.47,6.57\n9,Apple,Electronics,394328,99803,164000,United States,25.31,2.4\n10,Shell,Oil and gas,386201,20120,93000,United Kingdom,5.21,4.15\n11,UnitedHealth Group,Healthcare,324162,20120,400000,United States,6.21,0.81\n12,CVS Health,Healthcare,322467,4149,259500,United States,1.29,1.24\n13,Trafigura,Commodities,318476,6994,12347,Singapore,2.2,25.79\n14,China State Construction Engineering,Construction,305885,4234,382492,China,1.38,0.8\n15,Berkshire Hathaway,Financials,302089,-2282,383000,United States,-0.76,0.79\n16,Volkswagen Group,Automotive,293685,15233,675805,Germany,5.19,0.43\n17,Uniper,Electricity,288309,-1996,7008,Germany,-0.69,41.14\n18,Alphabet,Information technology,282836,59972,190234,United States,21.2,1.49\n19,McKesson,Healthcare,276711,3560,48000,United States,1.29,5.76\n20,Toyota,Automotive,274491,18110,375235,Japan,6.6,0.73\n21,TotalEnergies,Oil and gas,263310,20526,101279,France,7.8,2.6\n22,Glencore,Commodities,255984,17320,81284,Switzerland,6.77,3.15\n23,BP,Oil and gas,248891,-2487,67600,United Kingdom,-1.0,3.68\n24,Chevron,Oil and gas,246252,35465,43846,United States,14.4,5.62\n25,AmerisourceBergen,Healthcare,238587,1699,41500,United States,0.71,5.75\n26,Samsung Electronics,Electronics,234129,42398,270372,South Korea,18.11,0.87\n27,Costco,Retail,226954,5844,304000,United States,2.57,0.75\n28,Foxconn,Electronics,222535,4751,767062,Taiwan,2.13,0.29\n29,Industrial and Commercial Bank of China,Financials,214766,53589,427587,China,24.95,0.5\n30,China Construction Bank,Financials,202753,48145,376682,China,23.75,0.54\n31,Microsoft,Information technology,198270,72738,221000,United States,36.69,0.9\n32,Stellantis,Automotive,188888,17669,272367,Netherlands,9.35,0.69\n33,Agricultural Bank of China,Financials,187061,38524,452258,China,20.59,0.41\n34,Ping An Insurance,Financials,181566,12454,344223,China,6.86,0.53\n35,Cardinal Health,Healthcare,181364,-933,46035,United States,-0.51,3.94\n36,Cigna,Healthcare,180516,6668,70231,United States,3.69,2.57\n37,Marathon Petroleum,Oil and gas,180012,14516,17800,United States,8.06,10.11\n38,Phillips 66,Oil and gas,175702,11024,13000,United States,6.27,13.52\n39,Sinochem,Chemicals,173834,0,220760,China,0.0,0.79\n40,China Railway Engineering Corporation,Construction,171669,2035,314792,China,1.19,0.55\n41,Valero Energy,Oil and gas,171189,11528,9743,United States,6.73,17.57\n42,Gazprom,Oil and gas,167832,17641,468000,Russia,10.51,0.36\n43,Cargill,Conglomerate,165000,0,155000,United States,0.0,1.06\n44,China National Offshore Oil Corporation,Oil and gas,164762,16988,81775,China,10.31,2.01\n45,China Railway Construction Corporation,Construction,163037,1800,342098,China,1.1,0.48\n46,Baowu,Steel,161698,2493,245675,China,1.54,0.66\n47,Schwarz Gruppe,Retail,159800,0,575000,Germany,0.0,0.28\n48,Mitsubishi Group,Conglomerate,159371,8723,79706,Japan,5.47,2.0\n49,Ford Motor Company,Automotive,158057,-1981,173000,United States,-1.25,0.91\n50,Mercedes-Benz Group,Automotive,157403,15252,168797,Germany,9.69,0.93\n", "type": "text"}]